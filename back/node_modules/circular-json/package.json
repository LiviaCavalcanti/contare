{
  "_from": "circular-json",
  "_id": "circular-json@0.5.9",
  "_inBundle": false,
  "_integrity": "sha512-4ivwqHpIFJZBuhN3g/pEcdbnGUywkBblloGbkglyloVjjR3uT6tieI89MVOfbP2tHX5sgb01FuLgAOzebNlJNQ==",
  "_location": "/circular-json",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "circular-json",
    "fetchSpec": "latest",
    "name": "circular-json",
    "raw": "circular-json",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/circular-json/-/circular-json-0.5.9.tgz",
  "_shasum": "932763ae88f4f7dead7a0d09c8a51a4743a53b1d",
  "_spec": "circular-json",
  "_where": "/home/rebeca/ES/contare/back",
  "author": {
    "name": "Andrea Giammarchi",
    "url": "http://webreflection.blogspot.com/"
  },
  "bugs": {
    "url": "https://github.com/WebReflection/circular-json/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": "CircularJSON is in maintenance only, flatted is its successor.",
  "description": "JSON does not handle circular references. This version does",
  "devDependencies": {
    "coveralls": "^2.13.0",
    "istanbul": "^0.4.5",
    "tiny-cdn": "^0.7.0",
    "tressa": "^0.3.1"
  },
  "generator": "https://github.com/WebReflection/gitstrap",
  "homepage": "https://github.com/WebReflection/circular-json",
  "keywords": [
    "JSON",
    "circular",
    "parse",
    "recursion",
    "recursive",
    "reference",
    "stringify"
  ],
  "license": "MIT",
  "main": "./build/circular-json.node.js",
  "name": "circular-json",
  "optionalDependencies": {},
  "readme": "CircularJSON\n============\n\n[![donate](https://img.shields.io/badge/$-donate-ff69b4.svg?maxAge=2592000&style=flat)](https://github.com/WebReflection/donate) ![Downloads](https://img.shields.io/npm/dm/circular-json.svg) [![Build Status](https://travis-ci.org/WebReflection/circular-json.svg?branch=master)](https://travis-ci.org/WebReflection/circular-json) [![Coverage Status](https://coveralls.io/repos/github/WebReflection/circular-json/badge.svg?branch=master)](https://coveralls.io/github/WebReflection/circular-json?branch=master)\n\nSerializes and deserializes otherwise valid JSON objects containing circular references into and from a specialized JSON format.\n\n- - -\n\n## The future of this module is called [flatted](https://github.com/WebReflection/flatted#flatted)\n\nSmaller, faster, and able to produce on average a reduced output too, [flatted](https://github.com/WebReflection/flatted#flatted) is the new, bloatless, ESM and CJS compatible, circular JSON parser.\n\nIt has now reached V1 and it implements the exact same JSON API.\n\nPlease note **CircularJSON is in maintenance only** and **[flatted](https://github.com/WebReflection/flatted#flatted) is its successor**.\n\n- - -\n\n### A Working Solution To A Common Problem\nA usage example:\n\n```JavaScript\nvar object = {};\nobject.arr = [\n  object, object\n];\nobject.arr.push(object.arr);\nobject.obj = object;\n\nvar serialized = CircularJSON.stringify(object);\n// '{\"arr\":[\"~\",\"~\",\"~arr\"],\"obj\":\"~\"}'\n// NOTE: CircularJSON DOES NOT parse JS\n// it handles receiver and reviver callbacks\n\nvar unserialized = CircularJSON.parse(serialized);\n// { arr: [ [Circular], [Circular] ],\n// obj: [Circular] }\n\nunserialized.obj === unserialized;\nunserialized.arr[0] === unserialized;\nunserialized.arr.pop() === unserialized.arr;\n```\n\nA quick summary:\n\n  * **new** in version `0.5`, you can specify a JSON parser different from JSON itself. `CircularJSON.parser = ABetterJSON;` is all you need.\n  * uses `~` as a special prefix symbol to denote which parent the reference belongs to (i.e. `~root~child1~child2`)\n  * reasonably fast in both serialization and deserialization\n  * compact serialization for easier and slimmer transportation across environments\n  * [tested and covered](test/circular-json.js) over nasty structures too\n  * compatible with all JavaScript engines\n\nNode Installation & Usage\n============\n\n```bash\nnpm install --save circular-json\n```\n\n```javascript\n'use strict';\n\nvar\n  CircularJSON = require('circular-json'),\n  obj = { foo: 'bar' },\n  str\n;\n  \nobj.self = obj;\nstr = CircularJSON.stringify(obj);\n```\n\nThere are no dependencies.\n\nBrowser Installation & Usage\n================\n\n* Global: <build/circular-json.js>\n* AMD: <build/circular-json.amd.js>\n* CommonJS: <build/circular-json.node.js>\n\n(generated via [gitstrap](https://github.com/WebReflection/gitstrap))\n\n```html\n<script src=\"build/circular-json.js\"></script>\n```\n\n```javascript\n'use strict';\n\nvar CircularJSON = window.CircularJSON\n  , obj = { foo: 'bar' }\n  , str\n  ;\n  \nobj.self = obj;\nstr = CircularJSON.stringify(obj);\n```\n\nNOTE: Platforms without native JSON (i.e. MSIE <= 8) requires `json3.js` or similar.\n\nIt is also *a bad idea* to `CircularJSON.parse(JSON.stringify(object))` because of those manipulation used in `CircularJSON.stringify()` able to make parsing safe and secure.\n\nAs summary: `CircularJSON.parse(CircularJSON.stringify(object))` is the way to go, same is for `JSON.parse(JSON.stringify(object))`.\n\nAPI\n===\n\nIt's the same as native JSON, except the fourth parameter `placeholder`, which circular references to be replaced with `\"[Circular]\"` (i.e. for logging).\n\n* CircularJSON.stringify(object, replacer, spacer, placeholder)\n* CircularJSON.parse(string, reviver)\n\nBear in mind `JSON.parse(CircularJSON.stringify(object))` will work but not produce the expected output.\n\nSimilar Libraries\n=======\n\n### Why Not the [@izs](https://twitter.com/izs) One\nThe module [json-stringify-safe](https://github.com/isaacs/json-stringify-safe) seems to be for `console.log()`  but it's completely pointless for `JSON.parse()`, being latter one unable to retrieve back the initial structure. Here an example:\n\n```JavaScript\n// a logged object with circular references\n{\n  \"circularRef\": \"[Circular]\",\n  \"list\": [\n    \"[Circular]\",\n    \"[Circular]\"\n  ]\n}\n// what do we do with above output ?\n```\n\nJust type this in your `node` console: `var o = {}; o.a = o; console.log(o);`. The output will be `{ a: [Circular] }` ... good, but that ain't really solving the problem.\n\nHowever, if that's all you need, the function used to create that kind of output is probably faster than `CircularJSON` and surely fits in less lines of code.\n\n\n### Why Not {{put random name}} Solution\nSo here the thing: circular references can be wrong but, if there is a need for them, any attempt to ignore them or remove them can be considered just a failure.\n\nNot because the method is bad or it's not working, simply because the circular info, the one we needed and used in the first place, is lost!\n\nIn this case, `CircularJSON` does even more than just solve circular and recursions: it maps all same objects so that less memory is used as well on deserialization as less bandwidth too!\nIt's able to redefine those references back later on so the way we store is the way we retrieve and in a reasonably performant way, also trusting the snappy and native `JSON` methods to iterate.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/WebReflection/circular-json.git"
  },
  "scripts": {
    "coveralls": "cat ./coverage/lcov.info | coveralls",
    "test": "istanbul cover test/circular-json.js",
    "web": "$(sleep 2 && open http://0.0.0.0:7151/) & tiny-cdn run ./"
  },
  "unpkg": "build/circular-json.js",
  "version": "0.5.9"
}
